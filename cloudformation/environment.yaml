AWSTemplateFormatVersion: 2010-09-09
Description: Batch Compute Environment for ECR Mirror Jobs

Parameters:

  Auth:
    Description: "You must create an SSM parameter with auth file content. Existing external authentication to container repositories (Example empty file: { \"auths\": { } }"
    Type: AWS::SSM::Parameter::Name
  ComputeSubnets:
    Description: The subnets to launch the mirroring jobs into.
    Type: List<AWS::EC2::Subnet::Id>
  ComputeVpc:
    Description: The vpc to launch the mirroring jobs into.
    Type: AWS::EC2::VPC::Id
  EnvironmentType:
    Description: The type of runtime (and cost model) to use
    Type: String
    Default: FARGATE_SPOT
    AllowedValues:
      - FARGATE
      - FARGATE_SPOT
  LogRetention:
    Description: How long to retain logs (in days)
    Type: Number
    MinValue: 1
    Default: 7
  MaxVcpu:
    Description: The maximum amount of concurrent CPUs to use for jobs.
    Type: Number
    Default: 8
    MinValue: 1
  MirroringFrequency:
    Description: Scheduled invocation of the batch mirroring
    Type: String
    Default: none
    AllowedValues:
      - "none"
      - "1 hour"
      - "4 hours"
      - "12 hours"
      - "1 day"
      - "7 days"
      - "14 days"
      - "28 days"
  MirrorImageName:
    Description: Mirroring image name and tag
    Type: String
    Default: 1234567890.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-mirror:main

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Job Definition"
        Parameters:
          - MirrorImageName
          - MirroringFrequency
          - LogRetention
      - Label:
          default: "Compute Environment"
        Parameters:
          - Auth
          - EnvironmentType
          - MaxVcpu
      - Label:
          default: "Networking"
        Parameters:
          - ComputeVpc
          - ComputeSubnets
    ParameterLabels:
      Auth:
        default: "SSM Auth Parameter Name"
      ComputeSubnets:
        default: "Subnets"
      ComputeVpc:
        default: "VPC"
      EnvironmentType:
        default: "Environment Type"
      LogRetention:
        default: "Log Retention"
      MaxVcpu:
        default: "Maximum VCPUs"
      MirroringFrequency:
        default: "Mirroring Frequency"
      MirrorImageName:
        default: "Mirror Image Name"

Conditions:
  HasRate: !Not [!Equals ["none", !Ref MirroringFrequency]]

Resources:

  MirroringEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join ["-", [!Ref "AWS::StackName", "events-mirroring-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref ControllerJob
                  - !Ref IndividualControllerJob
                  - !Ref ControlQueue

  MirroringTimedRule:
    Type: AWS::Events::Rule
    Condition: HasRate
    Properties:
      Description: !Join [" ", ["Run every", !Ref MirroringFrequency]]
      ScheduleExpression: !Join ["", ["rate(", !Ref MirroringFrequency, ")"]]
      Targets:
        - Arn: !Ref ControlQueue
          RoleArn: !GetAtt MirroringEventRole.Arn
          Id: !Join ["-", ["mirror", "batch", !Ref "AWS::StackName"]]
          BatchParameters:
            JobDefinition: !Ref ControllerJob
            JobName: "timed-mirror-job"

  ChangedImageRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger container mirror on image changes"
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          result:
            - SUCCESS
      Targets:
        - Arn: !Ref ControlQueue
          RoleArn: !GetAtt MirroringEventRole.Arn
          Id: !Join ["-", ["mirror", "single", !Ref "AWS::StackName"]]
          BatchParameters:
            JobDefinition: !Ref IndividualControllerJob
            JobName: "single-mirror-job"
          InputTransformer:
            InputPathsMap:
              "Repository": "$.detail.repository-name"
              "Tag": "$.detail.image-tag"
            InputTemplate:  |
              {
                 "Parameters" : {"repository": <Repository>, "tag": <Tag>}
              }

  ImageMirrorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: Source
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: Source
        KeyType: HASH

  ComputeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Compute cluster
      VpcId: !Ref ComputeVpc

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Join ["-", [!Ref "AWS::StackName", "compute"]]
      ComputeResources:
        MaxvCpus: !Ref MaxVcpu
        Type: FARGATE_SPOT
        SecurityGroupIds:
          - !Ref ComputeSecurityGroup
        Subnets: !Ref ComputeSubnets
      State: ENABLED

  ControlQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1

  MirrorQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 2

  ContainerControllerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetention

  ContainerMirrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetention

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  MirrorTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "ecr-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:TagResource"
                  - "ecr:UploadLayerPart"
                Resource: "*"
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "ssm-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Join [ "/", [!Join [":", ["arn:aws:ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "parameter"]], !Ref Auth ]]

  MirrorJob:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Command:
          - python3
          - ./mirror.py
          - Ref::source
          - Ref::dest
        Environment:
          - Name: CONTAINER_AUTH_PARAMETER
            Value: !Ref Auth
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        Image: !Ref MirrorImageName
        JobRoleArn: !GetAtt MirrorTaskRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref "AWS::Region"
            awslogs-group: !Ref ContainerMirrorLogGroup
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: MEMORY
            Value: 512
          - Type: VCPU
            Value: .25
      PlatformCapabilities:
        - FARGATE
      PropagateTags: True
      Timeout:
        AttemptDurationSeconds: 300
      Type: container

  ControllerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "ecr-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:DescribeImages"
                Resource: "*"
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "dynamodb-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt ImageMirrorTable.Arn
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "batch-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref MirrorJob
                  - !Ref MirrorQueue
        - PolicyName: !Join [ "-", [ !Ref "AWS::StackName", "ssm-policy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Join [ "/", [!Join [":", ["arn:aws:ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "parameter"]], !Ref Auth ]]

  ControllerJob:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Command:
          - python3
          - ./controller.py
          - !Ref ImageMirrorTable
          - !Ref MirrorQueue
          - !Ref MirrorJob
        Environment:
          - Name: CONTAINER_AUTH_PARAMETER
            Value: !Ref Auth
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        Image: !Ref MirrorImageName
        JobRoleArn: !GetAtt ControllerTaskRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref "AWS::Region"
            awslogs-group: !Ref ContainerControllerLogGroup
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: MEMORY
            Value: 512
          - Type: VCPU
            Value: .25
      PlatformCapabilities:
        - FARGATE
      PropagateTags: True
      Timeout:
        AttemptDurationSeconds: 3600
      Type: container

  IndividualControllerJob:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Command:
          - python3
          - ./controller.py
          - !Ref ImageMirrorTable
          - !Ref MirrorQueue
          - !Ref MirrorJob
          - Ref::repository
          - Ref::tag
        Environment:
          - Name: CONTAINER_AUTH_PARAMETER
            Value: !Ref Auth
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        Image: !Ref MirrorImageName
        JobRoleArn: !GetAtt ControllerTaskRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref "AWS::Region"
            awslogs-group: !Ref ContainerControllerLogGroup
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
          - Type: MEMORY
            Value: 512
          - Type: VCPU
            Value: .25
      PlatformCapabilities:
        - FARGATE
      PropagateTags: True
      Timeout:
        AttemptDurationSeconds: 60
      Type: container

Outputs:
  ControlQueue:
    Description: Control queue ARN
    Value: !Ref ControlQueue
  ControllerJob:
    Description: Controller job ARN
    Value: !Ref ControllerJob
  MirrorQueue:
    Description: Mirror queue ARN
    Value: !Ref MirrorQueue
  MirrorJob:
    Description: Mirror job ARN
    Value: !Ref MirrorJob
  MirrorTable:
    Description: The image mirror definition table
    Value: !Ref ImageMirrorTable
